// If there are any errors in the submited form, then...
<% if @cocktail.errors.any? %>
  // Refresh the input error messages
  refreshErrorMessages('.cocktail_name', 1, "Name <%= @cocktail.errors.messages[:name].first %>");
  refreshErrorMessages('.cocktail_photo', 2, "Photo <%= @cocktail.errors.messages[:photo].first %>");
<% end %>

// Function that refreshes the error messages in the Cocktails#new form
// Parameters: containerSelector - selector of the container of a specific input;
//             containerChildrenNum - number of children in that container (without error messages);
//             errorMessage - the first error message of that input, or it's input denomination if there are no errors;
function refreshErrorMessages(containerSelector, containerChildrenNum, errorMessage) {
  var inputContainer = document.querySelector(containerSelector);
  var inputField = document.querySelector(`${containerSelector} input`);

  // If it exists, remove any input related error message
  if (inputContainer.childElementCount > containerChildrenNum) {
    inputContainer.classList.remove('form-group-valid', 'form-group-invalid');
    inputField.classList.remove('is-valid', 'is-invalid');

    document.querySelector(`${containerSelector} .invalid-feedback`).remove();
  }

  // If here are input related errors, mark the input as invalid and insert an error message
  if (errorMessage !== 'Name ' && errorMessage !== 'Photo ') {
    inputContainer.classList.add('form-group-invalid');
    inputField.classList.add('is-invalid');

    var Node = document.createElement('div');
    Node.classList = 'invalid-feedback';
    Node.innerHTML = errorMessage;

    inputContainer.appendChild(Node);

  // Otherwise mark the input as valid
  } else {
    inputContainer.classList.add('form-group-valid');
    inputField.classList.add('is-valid');
  }
}
